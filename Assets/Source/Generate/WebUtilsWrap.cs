//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class WebUtilsWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(WebUtils), typeof(System.Object));
		L.RegFunction("GetIPAddress", GetIPAddress);
		L.RegFunction("GetFileFromServer", GetFileFromServer);
		L.RegFunction("ThreadDownLoad", ThreadDownLoad);
		L.RegFunction("IsExistFileInServer", IsExistFileInServer);
		L.RegFunction("GetByteFromServer", GetByteFromServer);
		L.RegFunction("GetApkFromFile", GetApkFromFile);
		L.RegFunction("GetLength", GetLength);
		L.RegFunction("ThreadGetApk", ThreadGetApk);
		L.RegFunction("New", _CreateWebUtils);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("IP", get_IP, set_IP);
		L.RegVar("isDone", get_isDone, set_isDone);
		L.RegVar("processText", get_processText, set_processText);
		L.RegVar("processSlider", get_processSlider, set_processSlider);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateWebUtils(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				WebUtils obj = new WebUtils();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: WebUtils.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetIPAddress(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			string o = WebUtils.GetIPAddress();
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetFileFromServer(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			WebUtils.GetFileFromServer(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ThreadDownLoad(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			string arg0 = ToLua.CheckString(L, 1);
			string arg1 = ToLua.CheckString(L, 2);
			WebUtils.ThreadDownLoad(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsExistFileInServer(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			bool o = WebUtils.IsExistFileInServer(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetByteFromServer(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			byte[] o = WebUtils.GetByteFromServer(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetApkFromFile(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			WebUtils.GetApkFromFile();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetLength(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			long o = WebUtils.GetLength(arg0);
			LuaDLL.tolua_pushint64(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ThreadGetApk(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			string arg0 = ToLua.CheckString(L, 1);
			string arg1 = ToLua.CheckString(L, 2);
			UnityEngine.WWW arg2 = (UnityEngine.WWW)ToLua.CheckObject<UnityEngine.WWW>(L, 3);
			WebUtils.ThreadGetApk(arg0, arg1, arg2);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IP(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, WebUtils.IP);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_isDone(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushboolean(L, WebUtils.isDone);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_processText(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, WebUtils.processText);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_processSlider(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, WebUtils.processSlider);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_IP(IntPtr L)
	{
		try
		{
			string arg0 = ToLua.CheckString(L, 2);
			WebUtils.IP = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_isDone(IntPtr L)
	{
		try
		{
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			WebUtils.isDone = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_processText(IntPtr L)
	{
		try
		{
			string arg0 = ToLua.CheckString(L, 2);
			WebUtils.processText = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_processSlider(IntPtr L)
	{
		try
		{
			string arg0 = ToLua.CheckString(L, 2);
			WebUtils.processSlider = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

